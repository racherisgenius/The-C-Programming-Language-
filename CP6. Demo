//6.1 对10个数组一次赋值为0 1 2 3 4 5 6 7 8 9 
// 要求逆序输出
# include <stdio.h>
int main(void)
{
  int i, a[10];
  for(i=0; i<=9; ++i)
  {
    a[i] = i;
  }
  for(i=9; i>=0; --i)
  {
    printf("%d\n",a[i]);
  }
  return 0;
}

//6.2 用数组处理斐波那契在数列
# include <stdio.h>
int main(void)
{
  int i;
  int f[20] = {1, 1};
  for (i=2; i<20; ++i)
  {
    f[i] = f[i-2] + f[i-1];
  }
  for(i=0; i<20; ++i)
  {
  if(i%5 == 0) printf("\n");
  printf("%12d", f[i]);
  }
  printf("\n");
  return 0;
}

//*****6.3 sort10个面积 (bubble sort)
#include <stdio.h>
int main(void)
{
  int a[0];
  int i,j,t;
  printf("input 10 numbers:\n");
  for(i=0; i<10; ++i)
  {
    scanf(%d\n", &a[i]);
  }
  for(j=0; j<9; ++j)
  {
    for(i=0; i<9-j; ++j)
    {
      if(a[i] > a[i+1])
      {
        t = a[i];
        a[i] = a[i+1];
        a[i+1] = t;
      }
    }
   }
   printf("the sorted numbers:\n");
   for(i=0; i<10; ++i)
   {
    printf("%d\n", a[i]);
   }
  return 0;
}

//6.4将一个二维数组行和列的元素互换，存到另一个数组里
#include <stdio.h>
int main(void)
{
  int a[2][3] = {{1,2,3},{4,5,6}};
  int b[3][2], i, ;
  printf("array a:\n");
  
  for(i=0; i<= 1; ++i)
  {
    for(j=0; j<=2; ++j)
    {
      printf("%5d",a[i][j]);
      b[j][i] = a[i][j];
    }
    printf("\n");
  }
  
  printf("array b :\n");
  for(i=0; i<=2; ++i)
  {
    for(j=0; j<=1; ++j)
    {
      printf("%5d",b[i][j]);
    }
    printf("\n");
  }
  return 0;
}

//6.5 有一个3x4的矩阵，要求get那个数字最大的那个行和列
#include <stdio.h>
int main(void)
{
  int i,j,row, colum = 0;
  int max;
  int a[3][4] = {{1,2,3,4},{9,8,7,6},{-10,10,-5,2}};
  max = a[0][0];
  for(i=0; i<=2; ++i)
  {
    for(j=0; j<=3; ++j)
    {
      if(a[i][j]>max)
      {
        max = a[i][j];
        row = i;
        colum = j;
      }
    }
  }
  printf("max = %d\n row = %d\n colum = %d\n", max, row, colum);
  return 0;
}

//6.6 输入一个已知字符串
#include <stdio.h>
int main(void)
{
  char c[15] = {'H','e','l','l','o'};
  int i;
  for (i=0; i<15; ++i)
  {
    printf("%c\n",c[i]);
  }
  return 0;
}

//6.7 输出一个dimond
#include <stdio.h>
int main(void)
{ 
  char dimon[][5] = { {' ', ' ', '*'}, {' ', '*', ' ', '*'}, {'*', ' ', ' ', ' ',' ', '*'}
                      {' ', '*', ' ',' ','*'}, {' ', ' ','*'}};
   int i,j;
   for(i=0; i<5; ++i)
   {
      for(j=0; j<5; ++j)
      {
        printf("%c\n",dimon[][5]);
      }
   }
  return 0;
}

//6.8 判断一句话里面有几个单词
#include <stdio.h>
int main()
{
  char string[81];
  int t, num = 0; word = 0;
  char c;
  gets(string);
  for(i=0; (c=string[i])!='/0'; ++i)
  {
    if(c == ' ')
    {
      word = 0;
    }
    else if (word = 0)
    {
      word = 1;
      num++;
    }
  }
   printf("There are %d words in this string.\n", num);
  
  return 0;
}

//6.9判断几个句子的最大者
#include <stdio.h>
#include <string.h>
int main()
{
  char str[3][20];
  char string[20];
  int i;
  for(i=0; i<3; ++i)
  {
    gets(str[i]);
  }
    if(strcmp(str[0], str[1]) > 0)
      {
        strcpy(string,str[0]);
      }
    else 
    {
      strcpy(string, str[1]);
    }
  if(strcmp(str[2], string) > 0)
  {
    strcpy(string, str[2]);
  }
  printf("\n the largets string is \n%s\n", string);
  return 0;
}
